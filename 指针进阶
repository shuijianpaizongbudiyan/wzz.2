int main()
{
	char arr[] = "abcdef";
	char* pc = arr;
	printf("%s\n", arr);
	printf("%s\n", pc);
	return 0;
}

int main()
{
	char* p = "abcdef";
	printf("%c\n",*p);
	printf("%s\n", p);
	return 0;
}

int main()
{
	char arr1[] = "abcdef";
	char arr2[] = "abcdef";
	char* p1 = arr1;
	char* p2 = arr2;
	if (arr1 == arr2)//p1 == p2
	{   //  haha         hehe          
		printf("hehe\n");
	}
	else
	{
		printf("haha\n");
	}
	return 0;
	//这里p1和p2指向的是同一个字符串常量，C/C++会把常量字符串存储到单独的一个内存区域，
	//当几个指针指向同一个字符串的时候，它们实际会指向同一内存
	//但是用相同的字符串去初始化不同的数组的时候就会开辟不同的内存块，
	//所以p1 = p2,arr1 != arr2

}
指针数组
int main()
{
	int arr1[] = { 1,2,3,4,5 };
	int arr2[] = { 2,3,4,5,6 };
	int arr3[] = { 3,4,5,6,7 };
	int* parr[] = { arr1,arr2,arr3 };
	int i = 0;
	for (i = 0;i < 3;i++)
	{
		int j = 0;
		for (j = 0;j < 5;j++)
		{
			printf("%d ", *(parr[i] + j));
		}
		printf("\n");
	}
	return 0;
}

数组指针
int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int(*p)[10] = &arr;
	return 0;
}

int main()
{
	char* arr[5];
	char* (*pa)[5] = &arr;
	return 0;
}

int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10};
	int(*pa)[10] = &arr;
	int i = 0;
	for (i = 0;i < 10;i++)
	{
		//printf("%d ", (*pa)[i]);
		printf("%d ",*(*pa+i));
	}
	return 0;
}

void print1(int arr[3][5], int x, int y)
{
	int i = 0;
	int j = 0;
	for (i = 0;i < x;i++)
	{
		for (j = 0;j < y;j++)
		{
			printf("%d ", arr[i][j]);
		}
		printf("\n");
	}
}
void print2(int(*p)[5], int x, int y)
{
	int i = 0;
	for (i = 0;i < x;i++)
	{
		int j = 0;
		for (j = 0;j < y;j++)
		{
			//printf("%d ", p[i][j]);
			//printf("%d ", *(p[i] + j));
			//printf("%d ", *(*(p + i) + j));//p=arr,可替换
			printf("%d ", (*(p + i))[j]);
		}
		printf("\n");
	}
}
int main()
{
	int arr[3][5] = { {1,2,3,4,5},{2,3,4,5,6},{3,4,5,6,7} };
	print1(arr, 3, 5);
	print2(arr, 3, 5);
	return 0;
}

int main()
{
	int arr[5];//数组
	int* parr1[5];//指针数组
	int(*parr2)[5];//数组指针
	int(*parr3[5])[10];//parr3是一个数组，有10个元素，每个元素是一个指针数组，
	//该数组指针指向的数组有五个元素，每个元素是int
}


一维数组传参
void test(int arr[])
void test(int arr[10])
void test(int *arr)
void test(int *arr2[20])
void test(int **arr)
都ok

int main()
{
	int arr[10] = { 0 };
	int* arr2[20] = { 0 };
	test(arr);
	test(arr2);
}

二维数组传参
void test(int arr[3][5])ok
void test(int arr[][5])ok
void test(int arr[3][]) not ok
void test(int(*arr)[5])ok
void test(int(*arr[3])[5])ok

int main()
{
	int arr[3][5] = { 0 };
	test(arr);
	return 0;
}

void test(int* p)
{

}
int main()
{
	int a = 10;
	int* p1 = &a;
	test(&a);
	//test(p1);
}

void test(int** p)
{

}
int main()
{
	int a = 10;
	int* p = &a;
	int** pp = &p;
	int* arr[5];
	test(&p);
	test(pp);
	test(arr);
}


函数指针
int Add(int a, int b)
{
	int z = 0;
	z = a + b;
	return z;
}
int main()
{
	int a = 10;
	int b = 20;
	//printf("%d\n", Add(a, b));
	//&函数名 和 函数名 都是函数的地址
	printf("%p\n", &Add);
	printf("%p\n", Add);
	int(*pa)(int, int) = Add;
	printf("%d\n", (pa)(2, 3));
	printf("%d\n", (*pa)(2, 3));
	return 0;
}

void Print(char* str)
{
	printf("%s\n", str);
}
int main()
{
	void (*p)(char*) = Print;
	(*p)("hello world");
	return 0;
}
int main()
{
	(*(void (*)())0)();
}
//把0强制类型转换为：void(*)()函数指针类型  0-就是一个函数的地址
//调用0地址处的该函数
//*()解引用-就是这个函数   (函数)()-调用这个函数
//(void (*)())0 强制类型转换
void(*signal(int, void(*)(int)))(int);
//void(*        signal(int, void(*)(int))      )(int);
//              函数名
//第一个参数是一个int类型，第二个参数是一个函数指针类型
//函数返回的是一个函数指针类型;
typedef void(*pfun_t)(int);
pfun_t signal(int, pfun_t);//这两个就是上面那个

typedef unsigned int uint;

int Add(int x, int y)
{
	return x + y;
}
int Sub(int x, int y)
{
	return x - y;
}
int Mul(int x, int y)
{
	return x * y;
}
int Div(int x, int y)
{
	return x / y;
}

int main()
{
	//函数指针的数组
	int(*pa[4])(int, int) = { Add,Sub,Mul,Div };
	int i = 0;
	for (i = 0;i < 4;i++)
	{
		printf("%d\n",pa[i](2,3));
	}
	return 0;
}

void menu()
{
	printf("*********************************\n");
	printf("***  1.Add        2.sub       ***\n");
	printf("***  3.mul        4.div       ***\n");
	printf("***        0.exit             ***\n");
	printf("*********************************\n");
}

Calc(int(* pf)(int, int))
{
	int x = 0;
	int y = 0;
	printf("请输入两个数:>");
	scanf("%d%d", &x, &y);
	printf("%d\n", pf(x, y));
}

int main()
{
	int input = 0;
	do
	{
		menu();
		printf("请选择:>");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			Calc(Add);
			break;
		case 2:
			Calc(Sub);
			break;
		case 3:
			Calc(Mul);
			break;
		case 4:
			Calc(Div);
			break;
		case 0:
			printf("退出\n");
		default:
			printf("选择错误\n");
		}
	} while (input);
}

int main()
{
	int x = 0;
	int y = 0;
	int input = 0;
	int(*pfArr[5])(int, int) = { 0,Add,Sub,Mul,Div };
	do
	{
		menu();
		printf("请选择:>");
		scanf("%d", &input);
		if (input >= 1 && input <= 4)
		{
			printf("请输入两个数:>");
			scanf("%d%d", &x, &y);
			int ret = pfArr[input](x, y);
			printf("%d\n", ret);
		}
		else if (input == 0)
		{
			printf("退出\n");
		}
		else
		{
			printf("选择错误\n");
		}
	} while (input);
}

int main()
{
	int arr[10] = { 0 };
	int(*p)[10] = &arr;//数组指针
	int(*pfArr[4])(int, int);//函数指针数组
	int(*(*ppfArr)[4])(int, int) = &pfArr;//指向函数指针数组的指针
	//简单来说pfArr是个数组指针，指针指向的数组有4个元素，每个元素的类型是函数指针
}

void print(char* str)//回调函数
{
	printf("hehe:%s", str);
}
void test(void (*p)(char*))
{
	printf("test\n");
	p("bit");
}
int main()
{
	test(print);
	return 0;
}
int main()
{
	int arr[4];//数组
	int* arr1[3];//指针数组
	int(*pa)[3] = &arr1;//数组指针
	int(*parr[3])[3];//指向数组指针的数组
	int(*p)(int, int);//函数指针
	int(*pArr[3])(int, int);//函数指针数组
	int(*(*pArr)[3])(int, int);//指向函数指针数组的指针
	return 0;

}

int main()
{
	int a = 10;
	void* p = &a;
    //*p = 0 p++
	//void* 类型的指针 可以接收任意类型的地址 不能进行解引用操作 不能进行+-操作
}
#include<stdlib.h>
#include<string.h>
struct Stu
{
	char name[20];
	int age;
};

int cmp_int(const void* e1, const void* e2)
{
	return *(int*)e1 - *(int*)e2;
}

int cmp_float(const void* e1, const void* e2)
{
	return ((int)(*(float*)e1 - *(float*)e2));
}

int cmp_stu_age(const void* e1, const void* e2)
{
	return ((struct Stu*)e1)->age - ((struct Stu*)e2)->age;
}

int cmp_stu_name(const void* e1, const void* e2)
{
	//比较名字就是比较字符串
	//字符串比较要用strcmp函数
	//且strcmp符合返回条件
	return strcmp(((struct Stu*)e1)->name,((struct Stu*)e2)->name);
}

int main()
{
	int arr[10] = { 9,8,7,6,5,4,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), cmp_int);
	//qsort (排列的东西的起始位置(一般就是这个东西),长度,字节大小,排序的函数)
	//排序的函数,接收一个返回值，相等返回0；负数返回小的，正数返回大的
	int i;
	for (i = 0;i < sz;i++)
	{
		printf("%d ",arr[i]);
	}
	return 0;
}

int main()
{

	float f[5] = { 2.3,4.5,2.6,6.7,7.7 };
	int sz = sizeof(f) / sizeof(f[0]);
	qsort(f, sz, sizeof(f[0]), cmp_float);
	//qsort (排列的东西,长度,字节大小,排序的函数)
	//排序的函数,接收一个返回值，相等返回0；负数返回小的，正数返回大的
	int i;
	for (i = 0;i < sz;i++)
	{
		printf("%f ", f[i]);
	}
	return 0;
}
 
void test1()
{
	struct Stu s[3] = { {"wzz",18},{"cyp",19},{"lmq",20} };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), cmp_stu_name);//cmp_stu_age
}
int main()
{
	test1();
	//qsort (排列的东西,长度,字节大小,排序的函数)
	//排序的函数,接收一个返回值，相等返回0；负数返回小的，正数返回大的
	/*int i;
	for (i = 0;i < sz;i++)
	{
		printf("%f ", s[i]);
	}*/
	return 0;
}

qsort
第一个参数是 待排序数组的首元素地址
第二个参数是 待排序数组的元素的个数
第三个参数是 待排序数组的每个元素的大小 - 单位是字节
第四个参数是 函数指针，比较两个元素所用函数的地址 - 自己编写
             这个函数的两个参数是 待比较的两个元素的地址

void Swap(char* buf1, char* buf2, int width)
{
	int i = 0;
	for (i = 0;i < width;i++)
	{
		char tmp = *buf1;
		*buf1 = *buf2;
		*buf2 = tmp;
		*buf1++;
		*buf2++;
	}
}

void bubble_sort(void* base, int sz, int width, int(*cmp)(void* e1, void* e2))
{
	int i;
  //趟数
	for (i = 0;i < sz - 1;i++)
	{
      //每一趟比较的对数
		int j;
		for (j = 0;j < sz - 1 - i;j++)
		{   两个元素的比较
			if (cmp((char*)base+j*width,(char*)base+(j+1)*width) > 0)
			{
              //交换 
				Swap((char*)base + j * width, (char*)base + (j + 1) * width,width);
			}
		}
	}
}
 

int main()
{
	int arr[] = { 1,3,2,45,24,67,23,15,36 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	int width = sizeof(arr[0]);
	bubble_sort(arr, sz, sizeof(arr[0]), cmp_int);
	int i = 0;
	for (i = 0;i < sz;i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}

int main()
{
	struct Stu s[3] = {{"zhangsan",18},{"lisi",20},{"wangwu",28}};
	int sz = sizeof(s) / sizeof(s[0]);
	bubble_sort(s, sz, sizeof(s[0]), cmp_stu_name);
}

int main()
{
	//数组名是首元素地址
	//例外1. sizeof(数组名)-数组名表示整个数组
	//    2. &数组名-数组名表示整个数组
	int a[] = { 1,2,3,4 };
	printf("%d\n", sizeof(a));//4*4=16;//sizeof(数组名)-计算数组总大小-单位是字节 
	printf("%d\n", sizeof(a + 0));//首地址加0，为4/8个字节
	printf("%d\n", sizeof(*a));//*a = 首元素,sizeof(*a) = 4
	printf("%d\n", sizeof(a + 1));//   地址  4/8
	printf("%d\n", sizeof(a[1]));//第二个元素大小 = 4
	printf("%d\n", sizeof(&a));// 地址 4/8 
	printf("%d\n", sizeof(*&a));// &a是数组的地址,解引用就是整个数组 = 16
	printf("%d\n", sizeof(&a + 1));//数组地址加1，跳过了一个数组，但还是地址   4/8
	printf("%d\n", sizeof(&a[0]));//第一个元素的地址  4/8
	printf("%d\n", sizeof(&a[0] + 1));//第二个元素的地址 4/8
	return 0;
}

int main()
{
	char arr[] = { 'a','b','c','d','e','f' };
	printf("%d\n", sizeof(arr));//6
	printf("%d\n", sizeof(arr + 0));//   4/8
	printf("%d\n", sizeof(*arr));//1
	printf("%d\n", sizeof(arr[1]));//1
	printf("%d\n", sizeof(&arr));//   4/8
	printf("%d\n", sizeof(&arr + 1));//   4/8
	printf("%d\n", sizeof(&arr[0] + 1));//   4/8
}
int main()
{
	char arr[] = { 'a','b','c','d','e','f' };
	printf("%d\n", strlen(arr));//随机值 - 到\0 才结束
	printf("%d\n", strlen(arr + 0));//同上
	//printf("%d\n", strlen(*arr));//strlen接收一个地址，'a' = 97;奔溃
	//printf("%d\n", strlen(arr[1]));//奔溃
	printf("%d\n", strlen(&arr));//随机值
	printf("%d\n", strlen(&arr + 1));//随机值-6
	printf("%d\n", strlen(&arr[0] + 1));//随机值-1
}

int main()
{
	char arr[] = "abcdef";
	printf("%d\n", sizeof(arr));//7
	printf("%d\n", sizeof(arr + 0));//   4/8
	printf("%d\n", sizeof(*arr));//1
	printf("%d\n", sizeof(arr[1]));//1
	printf("%d\n", sizeof(&arr));//   4/8
	printf("%d\n", sizeof(&arr + 1));//   4/8
	printf("%d\n", sizeof(&arr[0] + 1));//   4/8
}

int main()
{
	char arr[] = "abcdef";
	printf("%d\n", strlen(arr));//6
	printf("%d\n", strlen(arr + 0));//同上
	//printf("%d\n", strlen(*arr));//strlen接收一个地址，'a' = 97;奔溃
	//printf("%d\n", strlen(arr[1]));//奔溃
	printf("%d\n", strlen(&arr));
	//6 会有警告 &arr-数组的地址-指针数组-char(*p)[7] = &arr
	printf("%d\n", strlen(&arr + 1));//随机值
	printf("%d\n", strlen(&arr[0] + 1));//5
}

int main()
{
	char *p = "abcdef";
	printf("%d\n", sizeof(p));//8
	printf("%d\n", sizeof(p + 1));//8
	printf("%d\n", sizeof(*p));//1
	printf("%d\n", sizeof(p[0]));//1
	printf("%d\n", sizeof(&p));//8
	printf("%d\n", sizeof(&p + 1));//8函数指针的数组函数指针的数组
	printf("%d\n", sizeof(&p[0] + 1));//8
	return 0;
}

int main()
{
	char* p = "abcdef";
	printf("%d\n", strlen(p));//6
	printf("%d\n", strlen(p + 1));//5
	//printf("%d\n", strlen(*p));//奔溃
	//printf("%d\n", strlen(p[0]));//奔溃
	printf("%d\n", strlen(&p));
 //随机值,p存的是a的地址，&p取的是p的地址,
 //从p的起始位置开始取字符串,后面有多长不知道,到\0为止
	printf("%d\n", strlen(&p + 1));//随机值
	printf("%d\n", strlen(&p[0] + 1));//5 第二个元素的地址
	return 0;
}

int main()
{
	int a[3][4] = { 0 };
	printf("%d\n", sizeof(a));//48
	printf("%d\n", sizeof(a[0][0]));//4
	printf("%d\n", sizeof(a[0]));//16//a[0]相当于第一行
	printf("%d\n", sizeof(a[0] + 1));
	//8//a[0]没有单独放在sizeof里，a[0]相当于第一行第一个元素的的地址，
	//地址+1是第一行第二个元素的地址
	printf("%d\n", sizeof(*(a[0] + 1)));//4   第一行第二个元素
	printf("%d\n", sizeof(a + 1));
	//二维数组的首元素为第一行，把二维数组看为一维数组，第二行首元素的地址 -  8
	printf("%d\n", sizeof(*(a + 1)));//16
	printf("%d\n", sizeof(&a[0] + 1));//& a[0] 第一行的地址+1    8
	printf("%d\n", sizeof(*(&a[0] + 1)));//16
	printf("%d\n", sizeof(*a));//16
	printf("%d\n", sizeof(a[3]));//16 根据类型计算大小
	return 0;
}

int main()
{
	int a[5] = { 1,2,3,4,5 };
	int* ptr = (int*)(&a + 1);//&a + 1,跳过一个数组
	printf("%d,%d\n", *(a + 1), *(ptr - 1));
	return 0;
}

struct Test
{
	int num;
	char* pcName;
	short aDate;
	char cha[2];
	short sBa[4];
}*p;

 假设p的值为0x100000,如下表达式的值为多少
已知，结构体Test类型的变量大小是20个字节

int main()
{
	p = (struct Test*)0x100000;
	printf("%p\n", p + 0x1);
	printf("%p\n", (unsigned long)p + 0x1);
	//转化为整形 0x100000 - 1048576  +1 =1048577 然后转化为十六进制 0x1000001
	printf("%p\n", (unsigned int*)p + 0x1);//整形+4
}

int main()
{
	int a[4] = { 1,2,3,4 };
	int* ptr1 = (int*)(&a + 1);
	int* ptr2 = (int*)((int)a + 1);
	//(int)a 把a转化为一个整型再+1，相当于变了一个字节
	//01 00 00 00  02 00 00 00  03 00 00 00  04 00 00 00
	//prt1 04 00 00 00
	//ptr2 00 00 00 02
	//小端存储模式0x 00 00 00 04/ 0x 02 00 00 00
	printf("%x,%x", ptr1[-1], *ptr2);//第二个报错
	return 0;
}

int main()
{
	int a[3][2] = { (0,1),(2,3),(4,5) };
	//逗号表达式 存的是 1 3   5 0   0 0
	int* p = a;
	p = a[0];
	printf("%d\n", p[0]);//1
	return 0;
}

int main()
{
	int a[5][5];
	int(*p)[4];
	p = a;
	printf("%p,%d\n", &p[4][2] - &a[4][2], &p[4][2] - &a[4][2]);
	//p[4][2] --- *(*(p+4)+2) 相当于4*4+2=18第十八个元素
	//18 - 4*5+2 = -4
	//100000000000000000000000100
	//111111111111111111111111011
	//111111111111111111111111100 - 补码 - %p打印的时候，认为内存里的就是地址
	return 0;
}

int main()
{
	int aa[2][5] = { 1,2,3,4,5,6,7,8,9,10 };
	int *ptr1 = (int*)(&aa + 1);
	int *ptr2 = (int*)(*(aa + 1));
	printf("%d,%d", *(ptr1 - 1), *(ptr2 - 1));//10 5
	return 0;
}

int main()
{
	char* a[] = { "work","at","alibaba" };
	//这是一个指针数组，第一个地址存放的是w的地址，后面是两个a
	char** pa = a;
	pa++;
	printf("%s\n", *pa);
	return 0;
}

int main()
{
	char* c[] = { "ENTER","NEW","POINT","FIRST" };
	char** cp[] = {c + 3,c + 2,c + 1,c};
	char*** cpp = cp;
	printf("%s\n", **++cpp);
	//*++cpp -> c+2 **++cpp -> PIONT
	printf("%s\n", *-- * ++cpp + 3);
	//++ 后cpp 已经发生改变
	//*++cpp -> c+1 --*cpp -> c  *--*cpp -> ENTER *--*cpp + 3 -> ER
	printf("%s\n", *cpp[-2] + 3);
	//cpp -> c+1 cpp[-2] -> c+3 *cpp[-2] -> FIRST *cpp[-2] + 3 -> ST
	printf("%s\n", cpp[-1][-2] + 1);
	//cpp -> c+1 cpp[-1] -> c+2 cpp[-1][-1] -> c+1 -> NEW 
	//cpp[-1][-2] + 1 -> EW
	return 0;
}

int main()
{
	unsigned long pulArray[] = {6,7,8,9,10};
	unsigned long* pulPtr;
	pulPtr = pulArray;
	*(pulPtr + 3) += 3;
	printf("%d %d\n", *pulPtr, *(pulPtr + 3));
	return 0;
}


void nixu(char* str)
{
	int len = strlen(str);
	char* left = str;
	char* right = str + len - 1;
	while (left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}
int main()
{
	char arr[256] = { 0 };
	//scanf("%s", arr);
	gets(arr);//取一行
	nixu(arr);
	printf("%s", arr);
}

