除了%操作符外，其他的操作符可以作用于整数和浮点数
   /取商%取余数
  >>右移操作符相当于除2的几次方，左移为乘
a = 00000000000000000000000000010000 = 16
正0负1符号位
1.算术右移(一般情况)
右边丢弃，左边补原符号位
2.逻辑右移
右边丢弃，左边补0
int main()
{
	int a = -2;
	//特殊1>>1 = 0,-1>>1 = -1,
	int b = a >> 1;
	printf("%d", b);
	return 0;
}


int main()///二进制
{
	int a = 3;
	int b = 5;
	//& = py.and//按位与
	//| = py.or//按位或
	//^ 同0异1//按位异或
	//a = 001
	//b = 101
	//a^b = 110 = 6, a&b = 001 = 1
	printf("%d\n", a & b);
	return 0;

交换两个数
int main()
{
	int a = 9;
	int b = 3;
	int tmp = a;
	a = b;
	b = tmp;
	return 0;
}
int main()//不创建第三变量，可能会溢出
{
	int a = 3;
	int b = 5;
	a = a + b;
	b = a - b;
	a = a - b;
	printf("%d %d\n", a, b);
	return 0;
}

int main()//不创建第三变量
{
	int a = 3;
	int b = 5;
	a = a ^ b;
	b = a ^ b;
	a = a ^ b;
	printf("%d %d\n", a, b);
	return 0;
}

 //求一个整数存储在内存中的二进制的1的个数
int main()//正整数
{
	int a = 0;
	int count = 0;
	scanf("%d", &a);
	while (a)
	{
		if (a % 2 == 1)
			count++;
		a = a / 2;
	}
	printf("%d\n", count);
	return 0;

int count_bit_one1(unsigned int a)
{
	int count = 0;
	while (a)
	{
		if (a % 2 == 1)
			count++;
		a = a / 2;
	}
	return count;
}
int count_bit_one2(int n)
{
	int count = 0;
	while (n)
	{
		n = n & (n - 1);
		count++;
	}
	return count;
}
int main()
{
	int a = 0;
	scanf("%d", &a);
	int count = count_bit_one1(a);
	printf("count = %d\n", count);
	return 0;
}

int main()
{
	int a = 0;
	int count = 0;
	scanf("%d", &a);
	int i = 0;
	for (i = 0;i < 32;i++)
	{
		if (1 == ((a >> i) & 1))
			count++;
	}
	printf("%d\n", count);
	return 0;
}


int main()
{
	int a = 0;
	int b = 0;
	int c = 3;
	//a = b = c + 2;最好不用
	b = c + 2;
	a = b;
	return 0;
}

int main()
{
	short s = 0;
	int a = 10;
	printf("%d\n", sizeof(s = a + 5));//2
	printf("%d\n", s);//0
	return 0;
}

int main()
{
	int a = 0;
	// ~ 按2进制位取反
	//00000000000000000000000000000000//非负整数原码反码补码都一样
	//11111111111111111111111111111111-补码//电脑内存里储存的都是补码
	//11111111111111111111111111111110-反码
	//10000000000000000000000000000001-原码//电脑打印的是原码
	//原码符号位不变，取反得到反码，反码加1得到补码
	printf("%d\n", ~a);
	return 0;
}

int main()
{
	int a = 11;
	a = a | (1 << 2);
	//      00000000000000000000000000001011
	//要得到00000000000000000000000000001111
	//      00000000000000000000000000000001
	//      00000000000000000000000000000100
	//     |00000000000000000000000000001011可得到
	printf("%d\n", a);
	a = a & (~(1 << 2));
	//同理
	printf("%d\n", a);
	return 0;
}

int main()
{
	int a = 10;//后置先赋值/使用，再++
	//int b = a++;//a = 11,b = 10
	int b = ++a;//前置先++，再赋值/使用 a = 11,b = 11
	printf("a = % d  b = % d\n", a, b);
	return 0;
}

int main()
{
	int a = 3;//真
	int b = 5;//真
	//&& = py.and
	//|| = py.or
	printf("%d\n", a && b);//真
	return 0;

int main()
{
	int i = 0, a = 0, b = 2, c = 3, d = 4;
	i = a++ && ++b && d++;
	printf("a = %d\nb = %d\nc = %d\nd = %d\n", a,b,c,d);
	//1,2,3,4
	//a++先使用=0后面都为0；a再++。
	//若都是||，且a = 1，a此时位真后面也不用再算
	return 0;
}

	int a = 3;
	int b = 5;
	int max = 0;
	max = (a > b ? a : b);
	printf("max = %d\n", max);
	//exp1? exp2 : exp3 如果exp1为真，返回exp2,反之 三目操作符或者条件操作符
	return 0;

int main()
{
	int a = 1;
	int b = 2;
	int c = (a > b, a = b + 10, a, b = a + 1);
	//逗号表达式从左向右依次运算，结果等于最后一个表达式的值
	printf("%d\n", c);
	return 0;
}

int main()
{
	int a[10] = { 0 };
	a[3] = 10;//索引
	return 0;
}

创建一个结构体类型
struct Stu
{
	char name[20];
	int age;
	char id[20];
};

int main()
{
	struct Stu s1 = { "wzz",18,"20031123" };
	printf("%s\n", s1.name);
	printf("%d\n", s1.age);
	printf("%s\n", s1.id);
	//结构体变量.成员名
	return 0;
}

//结构体
#include<string.h>
struct Book
{
	char name[20];
	short price;
};
int main()
{
	struct Book b1 = { "C语言程序设计",55 };
	struct Book* pd = &b1;
	strcpy(b1.name ,"C++");//name是一个数组，不能直接改，数组名本身上是一个地址
	//strcpy - 字符串拷贝-库函数-string.h
	b1.price = 15;//price是变量，可以直接改
	//pd是一个指针变量，指向的就是b1
	printf("%s\n", pd->name);
	printf("%d\n", pd->price);
	//*pd就是b1，pd存取了b1的地址
	printf("%s\n", (*pd).name);
	printf("%d\n", (*pd).price);
	//.结构体变量.成员
	//->结构体指针->成员
	printf("书名 = %s\n", b1.name);
	printf("价格 = %d\n", b1.price);
	return 0;
}

int main()
{
	char a = 3;
	//00000000000000000000000000000011 int 32bit
	//00000011-a char 8bit
	char b = 127;
	//00000000000000000000000001111111
	//01111111-b
	//a和b如何相加
	//char运算是要提高整型
	//00000011，0是符号位，前面全补0，即00000000000000000000000000000011
	//00000000000000000000000000000011
	//00000000000000000000000001111111
	//00000000000000000000000010000010
	char c = a + b;
	//10000010-c
	//因为%d,打印的是整型
	//11111111111111111111111110000010-补码
	//11111111111111111111111110000001-反码
	//10000000000000000000000001111110-原码
	//结果为-126
	printf("%d\n", c);
	return 0;
}

int main()
{
	char c = 1;
	printf("%u\n", sizeof(c));//1
	printf("%u\n", sizeof(+c));//计算时整型提升为4
	printf("%u\n", sizeof(!c));//1
	return 0;
}
