int main()
{
	char arr[] = "hello world";
	memset(arr, '*', 5);
	//memset(内容，改成什么东西，几个)
	printf("%s\n", arr);
	return 0;
}


//交换两个数的函数
void Swap2(int a, int b)//不需要返回值就用void
{
	int c = 0;
	c = a;
	a = b;
	b = c;
}
void Swap1(int* pa , int* pb)
{
	int c = 0;
	c = *pa;
	*pa = *pb;
	*pb = c;
}
int main()
{
	int x = 12;
	int y = 45;
	Swap1(&x, &y);//传址调用
	//Swap2(x,y);//传值调用
	printf("x = %d y = %d\n", x, y);
	return 0;
}
//传址调用  函数内部可以直接操作函数外部的变量
//传值调用  对形参的修改不影响实参


int is_prime(int n)//是否为素数
{
	int j = 0;
	for (j = 2;j < n;j++)
	{
		if (n % j == 0)
			return 0;
	}
	return 1;
}
int main()
{
	int i = 0;
	scanf("%d", & i);
	if (is_prime(i) == 1)
	{
		printf("是一个素数\n");
	}
	else
	{
		printf("不是素数\n");
	}
	return 0;
}

int is_leap_year(int a)//是否为闰年
{
	if ((a % 4 == 0 && a % 100 != 0) || (a % 400 == 0))
		return 1;
	else
		return 0;
}

int main()
{
	int year = 0;
	scanf("%d", &year);
	if (is_leap_year(year) == 1)
	{
		printf("是闰年\n");
	}
	else
	{
		printf("不是闰年\n");
	}
	return 0;
}

int binary_search(int arr[], int k, int sz)
//为什么要加int sz这个参数,arr本身是一个指针,若在函数里,sz = 1;
{
	int left = 0;
	int right = sz - 1;
	while (left <= right)
	{
		int mid = (left + right) / 2;
		if (arr[mid] > k)
		{
			right = mid - 1;
		}
		else if (arr[mid] < k)
		{
			left = mid + 1;
		}
		else
		{
			return mid;
			break;
		}
		if (left > right)
		{
			return -1;
		}
	}
}
int main()
{
	int arr[] = { 1,4,6,7,8,12,24,56,57,375.520 };
	int a = 32;
	int sz = sizeof(arr) / sizeof(arr[0]);
	//传过去的是数组arr首元素的地址
	int ret = binary_search(arr, a, sz);
	if (ret == -1)
	{
		printf("找不到指定的数字\n");
	}
	else
	{
		printf("找到了,下标是: %d\n", ret);
	}
	return 0;
}


void Add(int* pa)
{
	(*pa)++;
}
int main()
{
	int a = 0;
	Add(&a);
	printf("%d\n", a);
	return 0;
}

int main()
{
	printf("%d", printf("%d", printf("%d", 43)));
	//printf返回字符的个数
	//最里面printf打印43，此时打印了两个字符,返回2-> printf("%d", printf("%d",2))
	//接着打印2，2是一个字符->printf("%d",1),最后打印1
	//最后结果4321
	return 0;
}

函数声明一般放在头文件
例如头文件add.h，源文件test.c使用函数，add.c定义函数
test.c调用 #include "add.h"

void print(int n)//求一个数的每一位
{
	if (n > 9)
	{
		print(n / 10);
	}
	printf("%d ", n % 10);
}

int main()
{
	unsigned int num = 0;
	scanf("%d", &num);
	print(num);
	return 0;
}

//求字符串的长度
int my_strlen1(char* str)//非递归
{
	int count = 0;
	while (*str != '\0')
	{
		count++;
		str++;
	}
	return count;
}
int my_strlen(char* str)//递归的方法
{
	if (*str != '\0')
		return 1 + my_strlen(str + 1);
	else
		return 0;
}

int main()
{
	char arr[] = "wzz";
	int len = my_strlen(arr);
	printf("%d\n", len);
	return 0;
}

Fac(int n)//递归求阶乘
{
	if (n <= 1)
		return 1;
	else
		return n * Fac(n - 1);
}
int main()
{
	int a = 0;
	int ret = 0;
	scanf("%d", &a);
	ret = Fac(a);
	printf("%d的阶乘为%d\n",a,ret);
	return 0;
}

Fib(int n)//递归求斐波那契数列时数字50就要运行很久

{
	if (n <= 2)
		return 1;
	else
		return Fib(n - 1) + Fib(n - 2);
}
int fib(int n)
{
	int a = 1;
	int b = 1;
	int c = 1;
	while (n > 2)
	{
		c = a + b;
		a = b;
		b = c;
		n--;
	}
	return c;
}

int main()
{
	int a = 0;
	int b = 0;
	scanf("%d", &a);
	//b = Fib(a);
	b = fib(a);
	printf("%d\n", b);
	return 0;
}

int fib1(int n)
//青蛙跳台阶
//一次跳一阶或者两阶
//有多少个方法跳到n台阶
{
	int a = 1;
	int b = 2;
	int c = 0;
	while (n > 2)
	{
		c = a + b;
		a = b;
		b = c;
		n--;
	}
	return c;
	if (n == 1)
		return 1;
    else if (n == 2)
		return 2;
}
int main()
{
	int a = 0;
	int b = 0;
	scanf("%d", &a);
	b = fib1(a);
	printf("%d\n", b);
	return 0;
}

//打印你想要的乘法口诀表
void print_table(int n)
{
	int i = 0;
	for (i = 1;i <= n;i++)
	{
		int j = 0;
		for (j = 1;j <= i;j++)
		{
			printf("%d*%d=%-3d ", i, j, i * j);
		}
		printf("\n");
	}
}
int main()
{
	int n = 0;
	scanf("%d", &n);
	print_table(n);
	return 0;
}


//逆序字符串
reverse_string(char arr[])
{
	int left = 0;
	int right = strlen(arr)-1;
	while (left < right)
	{
		int tmp = arr[left];
		arr[left] = arr[right];
		arr[right] = tmp;
		left++;
		right--;
	}
}
int main()
{
	char arr[] = "abcdefg";
	reverse_string(arr);
	printf("%s\n", arr);
	return 0;
}

//递归逆序字符串
void reverse_string1(char arr[])
{
	char tmp= arr[0];
	int len = strlen(arr);
	arr[0] = arr[len-1];
	arr[len - 1] = '\0';//数组位置加1，最后为'\0',少了前后两个元素
	if (strlen(arr + 1) >= 2)
	{
		reverse_string1(arr + 1);
	}
	arr[len - 1] = tmp;
}
int main()
{
	char arr[] = "abcdefg";
	reverse_string1(arr);
	printf("%s\n", arr);
	return 0;
}

求一个数的每个位的数字之和
int digitsum(unsigned int num)
{
	if (num % 10 != 0)
		return num % 10 + digitsum(num / 10);
	else
		return num;
}
int main()
{
	unsigned int num = 0;
	scanf("%d", &num);
	int ret = digitsum(num);
	printf("ret = %d\n", ret);
	return 0;
}

double Pow(int n, int k)//求n的k次方
{
	if (k < 0)
		return (1.0 /(Pow(n, -k)));
	if (k == 0)
		return 1;
	else
		return (n * Pow(n, k - 1));
}
int main()
{
	int k = 0;
	int n = 0;
	scanf("%d%d", &n, &k);
	double ret = Pow(n, k);
	printf("ret = %lf", ret);
	return 0;
}
